<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on ivahaev.ru</title>
    <link>https://ivahaev.ru/tags/golang/</link>
    <description>Recent content in golang on ivahaev.ru</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-RU</language>
    <copyright>2022 Евгений Иваха</copyright>
    <lastBuildDate>Sat, 21 Apr 2018 11:55:00 +0500</lastBuildDate><atom:link href="https://ivahaev.ru/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Мой подход к тестированию. Часть вторая</title>
      <link>https://ivahaev.ru/how-to-test-go-applications-my-way-part-two/</link>
      <pubDate>Sat, 21 Apr 2018 11:55:00 +0500</pubDate>
      
      <guid>https://ivahaev.ru/how-to-test-go-applications-my-way-part-two/</guid>
      <description>&lt;p&gt;В &lt;a href=&#34;https://ivahaev.ru/post/how-to-test-go-applications-my-way-part-one/&#34;&gt;первой статье&lt;/a&gt; цикла о тестировании, которая вышла почти два года назад, я описал свой подход к тестированию, который был актуален в 2016 году. Время идёт, всё изменяется, стандартная библиотека &lt;strong&gt;Go&lt;/strong&gt; становится лучше и вот пару-тройку мажорных версий назад в пакете &lt;a href=&#34;https://golang.org/pkg/testing/&#34;&gt;testing&lt;/a&gt; появился новый метод &lt;a href=&#34;https://golang.org/pkg/testing/#T.Run&#34;&gt;Run()&lt;/a&gt;, который позволяет запускать именованные подтесты. Теперь &lt;a href=&#34;https://github.com/franela/goblin&#34;&gt;Гоблина&lt;/a&gt; можно отправить обратно в пещеру и уменьшить число зависимостей проекта.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Мой подход к тестированию. Часть первая</title>
      <link>https://ivahaev.ru/how-to-test-go-applications-my-way-part-one/</link>
      <pubDate>Fri, 08 Jul 2016 03:11:50 +0500</pubDate>
      
      <guid>https://ivahaev.ru/how-to-test-go-applications-my-way-part-one/</guid>
      <description>&lt;p&gt;Сколько бы «в прошлой жизни» я не пытался заставить себя писать тесты, получалось довольно плохо. Точнее, оно получалось, но как-то всё хромало, как у Винни-Пуха правильнописание. Казалось, что быстрее и проще потыкать в браузере, или клавиши понажимать, проверить, а дальше просто будет работать.&lt;/p&gt;
&lt;p&gt;По мере усложнения создаваемых приложений, логика становилась всё замудрённее, времени на такое вот «протыкивание» стало уходить всё больше. Каким-то своим отдельным путём я пришёл к тому, что стал писать мелкие отдельные файлы, которые выполняли некоторые функции из проекта и проверяли вывод на корректность. Таким образом, я для себя открыл юнит тестирование. Проблема была в том, что тесты необходимо поддерживать в актуальном состоянии, модифицировать вместе с основным кодом, а ведь кажется, что есть гораздо более важные задачи на данный момент.&lt;/p&gt;
&lt;p&gt;В мае 2016 года было принято решение начать писать тесты в принудительном порядке, тем более, что исходные тексты новой версии нашей платформы &lt;a href=&#34;https://github.com/getblank&#34;&gt;Blank&lt;/a&gt; мы открыли сразу, а в грязь лицом ударить не хотелось.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Версионирование go программ</title>
      <link>https://ivahaev.ru/go-releases-versions/</link>
      <pubDate>Fri, 01 Jul 2016 23:11:50 +0500</pubDate>
      
      <guid>https://ivahaev.ru/go-releases-versions/</guid>
      <description>&lt;p&gt;Читая новости &lt;a href=&#34;http://4gophers.ru/&#34;&gt;на отличном ресурсе по Go&lt;/a&gt;, наткнулся на статью Дейва Чени &lt;a href=&#34;http://dave.cheney.net/2016/06/24/gophers-please-tag-your-releases&#34;&gt;Гоферы, тэгируйте свои релизы&lt;/a&gt;. Вкратце, там говорится о полезности тэгов к комитам пакета в git репозитории, а так же о том, что при указании версии, стоит обратить внимание на формат &lt;a href=&#34;http://semver.org/spec/v2.0.0.html&#34;&gt;SemVer 2.0.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Что самое интересное, статья написана 24 июня, примерно в то же время, может быть, днём ранее, я написал инструмент для себя, который позволяет автоматизировать процесс изменения патч-версии приложений, написанных на &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Прокаченный таймер на Go</title>
      <link>https://ivahaev.ru/advanced-go-timer/</link>
      <pubDate>Sun, 01 May 2016 14:12:32 +0500</pubDate>
      
      <guid>https://ivahaev.ru/advanced-go-timer/</guid>
      <description>&lt;p&gt;У языка &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; шикарная стандартная библиотека, инструменты на все случаи жизни, при этом достаточно лаконичные. Например, рассмотрим отличный пакет &lt;a href=&#34;https://golang.org/pkg/time/&#34;&gt;time&lt;/a&gt;. За всё время работы с &lt;strong&gt;Go&lt;/strong&gt;, мне всего лишь дважды приходилось расширять его возможности.&lt;/p&gt;
&lt;p&gt;Первый раз, около года назад, понадобилось строковое представление времени и периодов на русском языке, что привело к созданию пакета &lt;a href=&#34;https://github.com/ivahaev/russian-time&#34;&gt;russian-time&lt;/a&gt;. Он не очень красивый, создан на скорую руку, потому не буду на нём останавливаться.&lt;/p&gt;
&lt;p&gt;Второй инструмент мне кажется более интересным. Предпосылкой к созданию этого небольшого пакета, была необходимость контроля времени выполнения скриптов во встроенном интерпретаторе &lt;strong&gt;JavaScript&lt;/strong&gt; &lt;strong&gt;Google V8&lt;/strong&gt;. Так уж повелось, что &lt;strong&gt;JavaScript&lt;/strong&gt;, как правило, характеризуется асинхронным поведением, что несколько затрудняло выполнение поставленной задачи. Одним из компонентов решения должен был стать таймер, который можно приостанавливать на неопределённое время, а после запускать снова с момента остановки. Так появился &lt;a href=&#34;https://github.com/ivahaev/timer&#34;&gt;timer&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go-logger – простой и информативный логгер для Go</title>
      <link>https://ivahaev.ru/simple-logger-for-golang/</link>
      <pubDate>Mon, 18 Jan 2016 00:47:11 +0500</pubDate>
      
      <guid>https://ivahaev.ru/simple-logger-for-golang/</guid>
      <description>&lt;p&gt;Не смотря на всё многообразие существующих логгеров для &lt;strong&gt;Go&lt;/strong&gt;, как-то не удалось подобрать удобный и подходящий для меня. Хотелось иметь инструмент, похожий на те, какими пользовался в других языках. Если хочешь сделать что-то хорошо, сделай это сам.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Amigo – лучший друг Golang и Asterisk</title>
      <link>https://ivahaev.ru/amigo-best-frend-of-golang-and-asterisk/</link>
      <pubDate>Thu, 14 Jan 2016 21:52:24 +0500</pubDate>
      
      <guid>https://ivahaev.ru/amigo-best-frend-of-golang-and-asterisk/</guid>
      <description>&lt;p&gt;Начиная писать свой первый &lt;a href=&#34;http://peach-dialer.com&#34;&gt;Peach Dialer&lt;/a&gt;, я выбрал язык, который довольно хорошо знал, благо работал с ним с 1999 года — &lt;strong&gt;PHP&lt;/strong&gt;. Меня не смущало, что он, в принципе, не предназначен для создания долгоживущих процессов, но то, что получилось в итоге, работает по несколько месяцев и радует своих владельцев.&lt;/p&gt;
&lt;p&gt;Потом пошла мода на &lt;a href=&#34;https://ru.wikipedia.org/wiki/WebSocket&#34;&gt;Websocket&lt;/a&gt;, который захотелось применить в интерфейсе, а &lt;strong&gt;PHP&lt;/strong&gt; в то время не очень-то умел с ними работать (может, и сейчас не умеет). Я обратил внимание на &lt;a href=&#34;https://nodejs.org&#34;&gt;node.js&lt;/a&gt;. Классная штука, любовь на века, подумал я, но вскоре захотелось большего.&lt;/p&gt;
&lt;p&gt;Бо́льшим для меня стал &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt; — язык, совмещающий скорость и удобство деплоя компилируемых языков с простотой разработки, свойственной интерпретируемым языкам. К сожалению, разработанных библиотек надлежащего качества и с ожидаемым функционалом для взаимодействия с &lt;strong&gt;Asterisk&lt;/strong&gt; в то время не было. Были какие-то начинания, но не доведённые до конца.&lt;/p&gt;
&lt;p&gt;Итак, по сусекам поскребя, да по амбару пометя́, испёк я &lt;a href=&#34;https://github.com/ivahaev/amigo&#34;&gt;Amigo&lt;/a&gt; — удобную библиотеку для работы с астериском посредством AMI протокола.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Шаблонизатор экселя для Go</title>
      <link>https://ivahaev.ru/go-xlsx-templater/</link>
      <pubDate>Mon, 28 Dec 2015 00:05:30 +0500</pubDate>
      
      <guid>https://ivahaev.ru/go-xlsx-templater/</guid>
      <description>&lt;p&gt;В процессе работы над платформой &lt;a href=&#34;http://getblank.net/ru&#34;&gt;Blank&lt;/a&gt;, возникла задача генерации документов. Так как платформа предполагает очень широкое применение, очень не хотелось формировать документы полностью программно. Нужно дать возможность интеграторам и администраторам системы удобно создавать шаблоны, на основе которых, в дальнейшем, будут формироваться различные документы.&lt;/p&gt;
&lt;p&gt;Сервер написан на &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;, поэтому первым делом я принялся изучать что уже придумано умными людьми для решения подобных задач. Оказалось, что совсем не много. Обсуждения, в основном, скатываются в область — есть решения на Яве, используйте их.  Неее, не для того мы на &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; пишем, чтобы за собой Яву тянуть.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ivahaev.ru/img/net!.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Три частые ошибки, возникающие при разработке на Go</title>
      <link>https://ivahaev.ru/three-often-mistakes-wth-go/</link>
      <pubDate>Thu, 12 Nov 2015 01:32:28 +0500</pubDate>
      
      <guid>https://ivahaev.ru/three-often-mistakes-wth-go/</guid>
      <description>&lt;p&gt;Это перевод статьи. Раньше желания переводить не возникало, но статья очень понравилась, наверное, из-за того, что сам наступал уже на подобные грабли. Перевод достаточно вольный, но суть передает верно. Если хоть одному начинающему разработчику поможет эта статья, труды мои будут не напрасными :).&lt;/p&gt;
&lt;p&gt;Оригинал статьи доступен по адресу &lt;a href=&#34;http://bryce.is/writing/code/jekyll/update/2015/11/01/3-go-gotchas.html&#34;&gt;http://bryce.is/writing/code/jekyll/update/2015/11/01/3-go-gotchas.html&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
