<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on ivahaev.ru</title>
    <link>https://ivahaev.ru/tags/javascript/</link>
    <description>Recent content in javascript on ivahaev.ru</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-RU</language>
    <copyright>2022 Евгений Иваха</copyright>
    <lastBuildDate>Wed, 13 Jul 2016 11:28:50 +0500</lastBuildDate><atom:link href="https://ivahaev.ru/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Двойной API для асинхронных функций</title>
      <link>https://ivahaev.ru/javascript-callback-promise-dual-api/</link>
      <pubDate>Wed, 13 Jul 2016 11:28:50 +0500</pubDate>
      
      <guid>https://ivahaev.ru/javascript-callback-promise-dual-api/</guid>
      <description>&lt;p&gt;Когда пишешь публичные асинхронные методы на &lt;strong&gt;JavaScript&lt;/strong&gt;, желательно придерживаться двух простых правил:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Если метод может вернуть ошибку в колбэке, то ошибка должна идти первым аргументом. Часто, даже если метод никогда не возвращает ошибку, первым аргументом передают &lt;code&gt;null&lt;/code&gt; для того, чтобы унифицировать все асинхронные вызовы;&lt;/li&gt;
&lt;li&gt;Если в метод не передана колбэк-функция, то метод должен вернуть Promise.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Мой подход к тестированию. Часть первая</title>
      <link>https://ivahaev.ru/how-to-test-go-applications-my-way-part-one/</link>
      <pubDate>Fri, 08 Jul 2016 03:11:50 +0500</pubDate>
      
      <guid>https://ivahaev.ru/how-to-test-go-applications-my-way-part-one/</guid>
      <description>&lt;p&gt;Сколько бы «в прошлой жизни» я не пытался заставить себя писать тесты, получалось довольно плохо. Точнее, оно получалось, но как-то всё хромало, как у Винни-Пуха правильнописание. Казалось, что быстрее и проще потыкать в браузере, или клавиши понажимать, проверить, а дальше просто будет работать.&lt;/p&gt;
&lt;p&gt;По мере усложнения создаваемых приложений, логика становилась всё замудрённее, времени на такое вот «протыкивание» стало уходить всё больше. Каким-то своим отдельным путём я пришёл к тому, что стал писать мелкие отдельные файлы, которые выполняли некоторые функции из проекта и проверяли вывод на корректность. Таким образом, я для себя открыл юнит тестирование. Проблема была в том, что тесты необходимо поддерживать в актуальном состоянии, модифицировать вместе с основным кодом, а ведь кажется, что есть гораздо более важные задачи на данный момент.&lt;/p&gt;
&lt;p&gt;В мае 2016 года было принято решение начать писать тесты в принудительном порядке, тем более, что исходные тексты новой версии нашей платформы &lt;a href=&#34;https://github.com/getblank&#34;&gt;Blank&lt;/a&gt; мы открыли сразу, а в грязь лицом ударить не хотелось.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
