<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ivahaev.ru</title>
    <link>https://ivahaev.ru/</link>
    <description>Recent content on ivahaev.ru</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-RU</language>
    <copyright>2022 Евгений Иваха</copyright>
    <lastBuildDate>Thu, 18 Feb 2021 00:19:00 +0500</lastBuildDate><atom:link href="https://ivahaev.ru/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Кому с Redux жить хорошо</title>
      <link>https://ivahaev.ru/how-to-get-profit-with-redux-and-react/</link>
      <pubDate>Thu, 18 Feb 2021 00:19:00 +0500</pubDate>
      
      <guid>https://ivahaev.ru/how-to-get-profit-with-redux-and-react/</guid>
      <description>&lt;p&gt;После почти трёхлетнего молчания, у меня есть новый материал. Эту статью я написал для корпоративного блога компании ManyChat на Хабре. Спустя некоторое время, могу опубликовать и у себя в оригинальной редакции.&lt;/p&gt;
&lt;p&gt;Существует мнение, что разработка через тестирование, или по канонам &lt;strong&gt;Test Driven Development (TDD)&lt;/strong&gt; для фронтенда не применима. В данной статье я постараюсь развенчать этот миф и покажу, что это не только возможно, но и очень удобно и приятно.&lt;/p&gt;
&lt;p&gt;Сам по себе &lt;strong&gt;&lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt;&lt;/strong&gt; достаточно понятен любому разработчику, чего не скажешь про &lt;strong&gt;&lt;a href=&#34;https://redux.js.org/&#34;&gt;Redux&lt;/a&gt;&lt;/strong&gt;. На первый взгляд может показаться, что это какой-то монструозный и непонятный инструмент. Прочитав данную статью, вы узнаете как разрабатывать приложения через тестирование на &lt;strong&gt;React&lt;/strong&gt;, используя &lt;strong&gt;Redux&lt;/strong&gt;, поймёте преимущества его использования, научитесь не открывать браузер при разработке фронтенд-приложений и экономить время на дебаге. Возможно, найдёте что-то новое для себя про написание фронтовых тестов.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Об авторе</title>
      <link>https://ivahaev.ru/about/</link>
      <pubDate>Fri, 01 May 2020 15:47:15 +0500</pubDate>
      
      <guid>https://ivahaev.ru/about/</guid>
      <description>Меня зовут Евгений. Всю сознательную жизнь так или иначе связан с ИТ. С компьютером познакомился году в 1994-м, когда на ЭВМ Электроника, у которого экран монитора был чуть больше спичечного коробка, пытался писать программы на Бейсике. 8 лет работал в области связи — вначале в сотовых операторах, затем с нуля создавал СПД и сопутствующую инфраструктуру местного оператора Интернета и IP телефонии. Активно работал с оборудованием Cisco, далее стал поглядывать на альтернативы.</description>
    </item>
    
    <item>
      <title>ACID Транзакции и MongoDB</title>
      <link>https://ivahaev.ru/mongodb-docker-dev-transactions/</link>
      <pubDate>Tue, 10 Jul 2018 23:11:00 +0500</pubDate>
      
      <guid>https://ivahaev.ru/mongodb-docker-dev-transactions/</guid>
      <description>&lt;p&gt;Летом 2018 года (т.е. прямо сейчас, на момент написания данной статьи) случилось невероятное — в &lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt; завезли честные &lt;a href=&#34;https://ru.wikipedia.org/wiki/ACID&#34;&gt;ACID транзакции&lt;/a&gt;. С выходом четвёртой версии этой документ-ориентированной &lt;a href=&#34;https://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F_%D0%B1%D0%B0%D0%B7%D0%B0%D0%BC%D0%B8_%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85&#34;&gt;СУБД&lt;/a&gt;, её можно использовать для чуть более серьёзных приложений.&lt;/p&gt;
&lt;p&gt;Для тех, кто в танке, в двух словах: транзакции позволяют нам провести серию изменений в нескольких документах и сохранить их разом, либо так же разом отменить все вносимые в рамках транзакции изменения, если что-то пошло не так, либо произошел сбой в приложении.&lt;/p&gt;
&lt;p&gt;К сожалению, разработчику воспользоваться этой супер-фичей не так-то просто. Ниже я расскажу почему, и что с этим всем делать.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Мой подход к тестированию. Часть вторая</title>
      <link>https://ivahaev.ru/how-to-test-go-applications-my-way-part-two/</link>
      <pubDate>Sat, 21 Apr 2018 11:55:00 +0500</pubDate>
      
      <guid>https://ivahaev.ru/how-to-test-go-applications-my-way-part-two/</guid>
      <description>&lt;p&gt;В &lt;a href=&#34;https://ivahaev.ru/post/how-to-test-go-applications-my-way-part-one/&#34;&gt;первой статье&lt;/a&gt; цикла о тестировании, которая вышла почти два года назад, я описал свой подход к тестированию, который был актуален в 2016 году. Время идёт, всё изменяется, стандартная библиотека &lt;strong&gt;Go&lt;/strong&gt; становится лучше и вот пару-тройку мажорных версий назад в пакете &lt;a href=&#34;https://golang.org/pkg/testing/&#34;&gt;testing&lt;/a&gt; появился новый метод &lt;a href=&#34;https://golang.org/pkg/testing/#T.Run&#34;&gt;Run()&lt;/a&gt;, который позволяет запускать именованные подтесты. Теперь &lt;a href=&#34;https://github.com/franela/goblin&#34;&gt;Гоблина&lt;/a&gt; можно отправить обратно в пещеру и уменьшить число зависимостей проекта.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Двойной API для асинхронных функций</title>
      <link>https://ivahaev.ru/javascript-callback-promise-dual-api/</link>
      <pubDate>Wed, 13 Jul 2016 11:28:50 +0500</pubDate>
      
      <guid>https://ivahaev.ru/javascript-callback-promise-dual-api/</guid>
      <description>&lt;p&gt;Когда пишешь публичные асинхронные методы на &lt;strong&gt;JavaScript&lt;/strong&gt;, желательно придерживаться двух простых правил:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Если метод может вернуть ошибку в колбэке, то ошибка должна идти первым аргументом. Часто, даже если метод никогда не возвращает ошибку, первым аргументом передают &lt;code&gt;null&lt;/code&gt; для того, чтобы унифицировать все асинхронные вызовы;&lt;/li&gt;
&lt;li&gt;Если в метод не передана колбэк-функция, то метод должен вернуть Promise.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Мой подход к тестированию. Часть первая</title>
      <link>https://ivahaev.ru/how-to-test-go-applications-my-way-part-one/</link>
      <pubDate>Fri, 08 Jul 2016 03:11:50 +0500</pubDate>
      
      <guid>https://ivahaev.ru/how-to-test-go-applications-my-way-part-one/</guid>
      <description>&lt;p&gt;Сколько бы «в прошлой жизни» я не пытался заставить себя писать тесты, получалось довольно плохо. Точнее, оно получалось, но как-то всё хромало, как у Винни-Пуха правильнописание. Казалось, что быстрее и проще потыкать в браузере, или клавиши понажимать, проверить, а дальше просто будет работать.&lt;/p&gt;
&lt;p&gt;По мере усложнения создаваемых приложений, логика становилась всё замудрённее, времени на такое вот «протыкивание» стало уходить всё больше. Каким-то своим отдельным путём я пришёл к тому, что стал писать мелкие отдельные файлы, которые выполняли некоторые функции из проекта и проверяли вывод на корректность. Таким образом, я для себя открыл юнит тестирование. Проблема была в том, что тесты необходимо поддерживать в актуальном состоянии, модифицировать вместе с основным кодом, а ведь кажется, что есть гораздо более важные задачи на данный момент.&lt;/p&gt;
&lt;p&gt;В мае 2016 года было принято решение начать писать тесты в принудительном порядке, тем более, что исходные тексты новой версии нашей платформы &lt;a href=&#34;https://github.com/getblank&#34;&gt;Blank&lt;/a&gt; мы открыли сразу, а в грязь лицом ударить не хотелось.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Версионирование go программ</title>
      <link>https://ivahaev.ru/go-releases-versions/</link>
      <pubDate>Fri, 01 Jul 2016 23:11:50 +0500</pubDate>
      
      <guid>https://ivahaev.ru/go-releases-versions/</guid>
      <description>&lt;p&gt;Читая новости &lt;a href=&#34;http://4gophers.ru/&#34;&gt;на отличном ресурсе по Go&lt;/a&gt;, наткнулся на статью Дейва Чени &lt;a href=&#34;http://dave.cheney.net/2016/06/24/gophers-please-tag-your-releases&#34;&gt;Гоферы, тэгируйте свои релизы&lt;/a&gt;. Вкратце, там говорится о полезности тэгов к комитам пакета в git репозитории, а так же о том, что при указании версии, стоит обратить внимание на формат &lt;a href=&#34;http://semver.org/spec/v2.0.0.html&#34;&gt;SemVer 2.0.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Что самое интересное, статья написана 24 июня, примерно в то же время, может быть, днём ранее, я написал инструмент для себя, который позволяет автоматизировать процесс изменения патч-версии приложений, написанных на &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Прокаченный таймер на Go</title>
      <link>https://ivahaev.ru/advanced-go-timer/</link>
      <pubDate>Sun, 01 May 2016 14:12:32 +0500</pubDate>
      
      <guid>https://ivahaev.ru/advanced-go-timer/</guid>
      <description>&lt;p&gt;У языка &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; шикарная стандартная библиотека, инструменты на все случаи жизни, при этом достаточно лаконичные. Например, рассмотрим отличный пакет &lt;a href=&#34;https://golang.org/pkg/time/&#34;&gt;time&lt;/a&gt;. За всё время работы с &lt;strong&gt;Go&lt;/strong&gt;, мне всего лишь дважды приходилось расширять его возможности.&lt;/p&gt;
&lt;p&gt;Первый раз, около года назад, понадобилось строковое представление времени и периодов на русском языке, что привело к созданию пакета &lt;a href=&#34;https://github.com/ivahaev/russian-time&#34;&gt;russian-time&lt;/a&gt;. Он не очень красивый, создан на скорую руку, потому не буду на нём останавливаться.&lt;/p&gt;
&lt;p&gt;Второй инструмент мне кажется более интересным. Предпосылкой к созданию этого небольшого пакета, была необходимость контроля времени выполнения скриптов во встроенном интерпретаторе &lt;strong&gt;JavaScript&lt;/strong&gt; &lt;strong&gt;Google V8&lt;/strong&gt;. Так уж повелось, что &lt;strong&gt;JavaScript&lt;/strong&gt;, как правило, характеризуется асинхронным поведением, что несколько затрудняло выполнение поставленной задачи. Одним из компонентов решения должен был стать таймер, который можно приостанавливать на неопределённое время, а после запускать снова с момента остановки. Так появился &lt;a href=&#34;https://github.com/ivahaev/timer&#34;&gt;timer&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go-logger – простой и информативный логгер для Go</title>
      <link>https://ivahaev.ru/simple-logger-for-golang/</link>
      <pubDate>Mon, 18 Jan 2016 00:47:11 +0500</pubDate>
      
      <guid>https://ivahaev.ru/simple-logger-for-golang/</guid>
      <description>&lt;p&gt;Не смотря на всё многообразие существующих логгеров для &lt;strong&gt;Go&lt;/strong&gt;, как-то не удалось подобрать удобный и подходящий для меня. Хотелось иметь инструмент, похожий на те, какими пользовался в других языках. Если хочешь сделать что-то хорошо, сделай это сам.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Amigo – лучший друг Golang и Asterisk</title>
      <link>https://ivahaev.ru/amigo-best-frend-of-golang-and-asterisk/</link>
      <pubDate>Thu, 14 Jan 2016 21:52:24 +0500</pubDate>
      
      <guid>https://ivahaev.ru/amigo-best-frend-of-golang-and-asterisk/</guid>
      <description>&lt;p&gt;Начиная писать свой первый &lt;a href=&#34;http://peach-dialer.com&#34;&gt;Peach Dialer&lt;/a&gt;, я выбрал язык, который довольно хорошо знал, благо работал с ним с 1999 года — &lt;strong&gt;PHP&lt;/strong&gt;. Меня не смущало, что он, в принципе, не предназначен для создания долгоживущих процессов, но то, что получилось в итоге, работает по несколько месяцев и радует своих владельцев.&lt;/p&gt;
&lt;p&gt;Потом пошла мода на &lt;a href=&#34;https://ru.wikipedia.org/wiki/WebSocket&#34;&gt;Websocket&lt;/a&gt;, который захотелось применить в интерфейсе, а &lt;strong&gt;PHP&lt;/strong&gt; в то время не очень-то умел с ними работать (может, и сейчас не умеет). Я обратил внимание на &lt;a href=&#34;https://nodejs.org&#34;&gt;node.js&lt;/a&gt;. Классная штука, любовь на века, подумал я, но вскоре захотелось большего.&lt;/p&gt;
&lt;p&gt;Бо́льшим для меня стал &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt; — язык, совмещающий скорость и удобство деплоя компилируемых языков с простотой разработки, свойственной интерпретируемым языкам. К сожалению, разработанных библиотек надлежащего качества и с ожидаемым функционалом для взаимодействия с &lt;strong&gt;Asterisk&lt;/strong&gt; в то время не было. Были какие-то начинания, но не доведённые до конца.&lt;/p&gt;
&lt;p&gt;Итак, по сусекам поскребя, да по амбару пометя́, испёк я &lt;a href=&#34;https://github.com/ivahaev/amigo&#34;&gt;Amigo&lt;/a&gt; — удобную библиотеку для работы с астериском посредством AMI протокола.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Шаблонизатор экселя для Go</title>
      <link>https://ivahaev.ru/go-xlsx-templater/</link>
      <pubDate>Mon, 28 Dec 2015 00:05:30 +0500</pubDate>
      
      <guid>https://ivahaev.ru/go-xlsx-templater/</guid>
      <description>&lt;p&gt;В процессе работы над платформой &lt;a href=&#34;http://getblank.net/ru&#34;&gt;Blank&lt;/a&gt;, возникла задача генерации документов. Так как платформа предполагает очень широкое применение, очень не хотелось формировать документы полностью программно. Нужно дать возможность интеграторам и администраторам системы удобно создавать шаблоны, на основе которых, в дальнейшем, будут формироваться различные документы.&lt;/p&gt;
&lt;p&gt;Сервер написан на &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;, поэтому первым делом я принялся изучать что уже придумано умными людьми для решения подобных задач. Оказалось, что совсем не много. Обсуждения, в основном, скатываются в область — есть решения на Яве, используйте их.  Неее, не для того мы на &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; пишем, чтобы за собой Яву тянуть.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ivahaev.ru/img/net!.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Умный колбэк</title>
      <link>https://ivahaev.ru/smart-callback/</link>
      <pubDate>Mon, 23 Nov 2015 00:57:54 +0500</pubDate>
      
      <guid>https://ivahaev.ru/smart-callback/</guid>
      <description>&lt;p&gt;В настоящее время сложно предложить клиентам что-то действительно уникальное, конкурентная борьба переходит в иные плоскости. Сегодняшние клиенты довольно разборчивы. Цена продукта уже не всегда играет решающую роль, покупатели ценят сервис.&lt;/p&gt;
&lt;p&gt;Естественно, многие компании придумывают различные способы привлечения и удержания клиентов. Рассмотрим вариант, как правильно настроенный на принятие входящих звонков телефонный сервис поможет не терять потенциальных и удерживать существующих клиентов.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Инкремент переменной в дайлплане Астериска</title>
      <link>https://ivahaev.ru/inkriemient-pieriemiennoi-v-dailplanie-astieriska/</link>
      <pubDate>Sat, 14 Nov 2015 12:34:30 +0500</pubDate>
      
      <guid>https://ivahaev.ru/inkriemient-pieriemiennoi-v-dailplanie-astieriska/</guid>
      <description>&lt;p&gt;Если требуется реализовать какой-то счетчик в дайлплане, удобно использовать переменную канала. Но просто так изменить её значение, прибавляя единицу, не получится.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Глубокий дебаг астериска</title>
      <link>https://ivahaev.ru/deep-debug-astierisk/</link>
      <pubDate>Thu, 12 Nov 2015 16:30:30 +0500</pubDate>
      
      <guid>https://ivahaev.ru/deep-debug-astierisk/</guid>
      <description>&lt;p&gt;Иногда можно потерять довольно много времени, пытаясь в консоли астериска отловить ошибку выполнения &lt;strong&gt;agi&lt;/strong&gt; скрипта, или просто внешнего приложения, запускаемого из дайлплана. Есть один способ, который в документации в явном виде не описан, но очень помогает. Мы запустим &lt;strong&gt;asterisk&lt;/strong&gt; в режиме, похожем на монопольный в &lt;strong&gt;1С&lt;/strong&gt;, при этом будем видеть в его консоли все предупреждения и ошибки.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Три частые ошибки, возникающие при разработке на Go</title>
      <link>https://ivahaev.ru/three-often-mistakes-wth-go/</link>
      <pubDate>Thu, 12 Nov 2015 01:32:28 +0500</pubDate>
      
      <guid>https://ivahaev.ru/three-often-mistakes-wth-go/</guid>
      <description>&lt;p&gt;Это перевод статьи. Раньше желания переводить не возникало, но статья очень понравилась, наверное, из-за того, что сам наступал уже на подобные грабли. Перевод достаточно вольный, но суть передает верно. Если хоть одному начинающему разработчику поможет эта статья, труды мои будут не напрасными :).&lt;/p&gt;
&lt;p&gt;Оригинал статьи доступен по адресу &lt;a href=&#34;http://bryce.is/writing/code/jekyll/update/2015/11/01/3-go-gotchas.html&#34;&gt;http://bryce.is/writing/code/jekyll/update/2015/11/01/3-go-gotchas.html&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Проигрывание файла при телефонном разговоре</title>
      <link>https://ivahaev.ru/proighryvaniie-faila-pri-tieliefonnom-razghovorie/</link>
      <pubDate>Wed, 11 Nov 2015 01:53:02 +0500</pubDate>
      
      <guid>https://ivahaev.ru/proighryvaniie-faila-pri-tieliefonnom-razghovorie/</guid>
      <description>&lt;p&gt;В работе оператора колл-центра часто возникает необходимость проиграть в канал заранее заготовленные голосовые файлы, например, адреса офисов и режимы работы.&lt;/p&gt;
&lt;p&gt;Рассмотрим вариант решения данной задачи на базе &lt;strong&gt;IP PBX Asterisk&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Blank</title>
      <link>https://ivahaev.ru/blank/</link>
      <pubDate>Wed, 11 Nov 2015 00:44:42 +0500</pubDate>
      
      <guid>https://ivahaev.ru/blank/</guid>
      <description>&lt;p&gt;Параллельно занимаюсь разработкой собственной универсальной системы автоматизации бизнес-процессов, которая называется &lt;a href=&#34;https://getblank.github.io/site/&#34;&gt;&lt;strong&gt;Blank&lt;/strong&gt;&lt;/a&gt;. Данный проект интересен тем, что позволяет построить практически любую информационную систему в кратчайшие сроки. В одном довольно простом конфигурационном файле описывается как структура данных, так и бизнес-логика. Платформа сама создаёт готовый пользовательский интерфейс для работы с данными сразу после описания их структуры. Задействованы многие современные технологии. Это и &lt;strong&gt;Go&lt;/strong&gt;, &lt;strong&gt;React.js&lt;/strong&gt;, &lt;strong&gt;WAMP&lt;/strong&gt;, встроенная база данных. Гибкая настройка прав, автоматическая генерация клиентского интерфейса, простая интеграция с существующими системами. Бизнес-логика описывается на хорошо знакомом &lt;strong&gt;Javascript&lt;/strong&gt; и работает в микросервисе на &lt;strong&gt;Node.JS&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
